{"version":3,"sources":["Header.js","App.js","index.js"],"names":["Header","AppBar","position","Toolbar","Typography","variant","context","AudioContext","App","React","useState","file","setFile","loading","setLoading","bpm","setBpm","CssBaseline","Container","style","marginTop","Alert","severity","marginBottom","display","alignItems","gap","type","accept","id","onChange","e","target","files","htmlFor","Button","color","component","name","LoadingButton","startIcon","Check","disabled","loadingPosition","onClick","a","reader","FileReader","onload","fileEvent","decodeAudioData","result","buffer","audioData","numberOfChannels","channel1Data","getChannelData","channel2Data","length","i","tempo","MusicTempo","Math","round","readAsArrayBuffer","ReactDOM","render","document","getElementById"],"mappings":"iQAaeA,EAVA,WACX,OACI,cAACC,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,+B,iCCMVC,EAAU,IAAIC,aAoGLC,EAlGH,WAAO,IAAD,EACUC,IAAMC,SAAS,MADzB,mBACPC,EADO,KACDC,EADC,OAEgBH,IAAMC,UAAS,GAF/B,mBAEPG,EAFO,KAEEC,EAFF,OAGQL,IAAMC,SAAS,MAHvB,mBAGPK,EAHO,KAGFC,EAHE,KAKd,OACI,gCACI,cAACC,EAAA,EAAD,IACA,cAAC,EAAD,IACA,eAACC,EAAA,EAAD,CAAWC,MAAO,CAAEC,UAAW,IAA/B,UACI,cAAChB,EAAA,EAAD,CAAYC,QAAQ,KAApB,0CAECU,GACG,eAACM,EAAA,EAAD,CACIC,SAAS,UACTH,MAAO,CAAEI,aAAc,GAAIH,UAAW,GAF1C,kBAIUL,KAId,sBAAKI,MAAO,CAAEK,QAAS,OAAQC,WAAY,SAAUC,IAAK,GAA1D,UACI,uBACIC,KAAK,OACLC,OAAO,UACPT,MAAO,CAAEK,QAAS,QAClBK,GAAG,cACHC,SAAU,SAACC,GACHA,EAAEC,OAAOC,MAAM,KACfrB,EAAQmB,EAAEC,OAAOC,MAAM,IACvBjB,EAAO,UAInB,uBAAOkB,QAAQ,cAAf,SACI,cAACC,EAAA,EAAD,CACI9B,QAAQ,YACR+B,MAAM,UACNC,UAAU,OAHd,yCAQJ,cAACjC,EAAA,EAAD,CAAYC,QAAQ,KAAKgC,UAAU,OAAnC,SACK1B,EAAOA,EAAK2B,KAAO,+DAG5B,cAACC,EAAA,EAAD,CACI1B,QAASA,EACTR,QAAQ,WACR+B,MAAM,UACNI,UAAW,cAACC,EAAA,EAAD,IACXtB,MAAO,CAAEC,UAAW,IACpBsB,UAAW/B,EACXgC,gBAAgB,QAChBC,QAAO,sBAAE,4BAAAC,EAAA,sDACL/B,GAAW,IACLgC,EAAS,IAAIC,YACZC,OAAS,SAAUC,GACtB3C,EAAQ4C,gBACJD,EAAUjB,OAAOmB,QACjB,SAACC,GACG,IAAIC,EAAY,GAEhB,GAAgC,IAA5BD,EAAOE,iBAMP,IALA,IAAMC,EACFH,EAAOI,eAAe,GACpBC,EACFL,EAAOI,eAAe,GACpBE,EAASH,EAAaG,OACnBC,EAAI,EAAGA,EAAID,EAAQC,IACxBN,EAAUM,IACLJ,EAAaI,GACVF,EAAaE,IACjB,OAGRN,EAAYD,EAAOI,eAAe,GAGtC,IAAMI,EAAQ,IAAIC,IAAWR,GAE7BvC,GAAW,GAEXE,EAAO8C,KAAKC,MAAMH,EAAMA,YAIpCd,EAAOkB,kBAAkBrD,GAjCpB,2CARb,iDC3DhBsD,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.5a1593c7.chunk.js","sourcesContent":["import React from 'react'\nimport { AppBar, Toolbar, Typography } from '@material-ui/core'\n\nconst Header = () => {\n    return (\n        <AppBar position=\"sticky\">\n            <Toolbar>\n                <Typography variant=\"h6\">BPM Analyzer</Typography>\n            </Toolbar>\n        </AppBar>\n    )\n}\n\nexport default Header\n","import React from 'react'\nimport {\n    Button,\n    Container,\n    CssBaseline,\n    Typography,\n    Alert,\n} from '@material-ui/core'\nimport Header from './Header'\nimport MusicTempo from 'music-tempo'\nimport { LoadingButton } from '@material-ui/lab'\nimport { Check } from '@material-ui/icons'\n\nconst context = new AudioContext()\n\nconst App = () => {\n    const [file, setFile] = React.useState(null)\n    const [loading, setLoading] = React.useState(false)\n    const [bpm, setBpm] = React.useState(null)\n\n    return (\n        <div>\n            <CssBaseline />\n            <Header />\n            <Container style={{ marginTop: 30 }}>\n                <Typography variant=\"h4\">BPM 측정하기</Typography>\n\n                {bpm && (\n                    <Alert\n                        severity=\"success\"\n                        style={{ marginBottom: 10, marginTop: 5 }}\n                    >\n                        BPM: {bpm}\n                    </Alert>\n                )}\n\n                <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>\n                    <input\n                        type=\"file\"\n                        accept=\"audio/*\"\n                        style={{ display: 'none' }}\n                        id=\"file-select\"\n                        onChange={(e) => {\n                            if (e.target.files[0]) {\n                                setFile(e.target.files[0])\n                                setBpm(null)\n                            }\n                        }}\n                    />\n                    <label htmlFor=\"file-select\">\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            component=\"span\"\n                        >\n                            파일 선택\n                        </Button>\n                    </label>\n                    <Typography variant=\"h6\" component=\"span\">\n                        {file ? file.name : '파일을 선택해주세요'}\n                    </Typography>\n                </div>\n                <LoadingButton\n                    loading={loading}\n                    variant=\"outlined\"\n                    color=\"primary\"\n                    startIcon={<Check />}\n                    style={{ marginTop: 10 }}\n                    disabled={!file}\n                    loadingPosition=\"start\"\n                    onClick={async () => {\n                        setLoading(true)\n                        const reader = new FileReader()\n                        reader.onload = function (fileEvent) {\n                            context.decodeAudioData(\n                                fileEvent.target.result,\n                                (buffer) => {\n                                    let audioData = []\n\n                                    if (buffer.numberOfChannels === 2) {\n                                        const channel1Data =\n                                            buffer.getChannelData(0)\n                                        const channel2Data =\n                                            buffer.getChannelData(1)\n                                        const length = channel1Data.length\n                                        for (let i = 0; i < length; i++) {\n                                            audioData[i] =\n                                                (channel1Data[i] +\n                                                    channel2Data[i]) /\n                                                2\n                                        }\n                                    } else {\n                                        audioData = buffer.getChannelData(0)\n                                    }\n\n                                    const tempo = new MusicTempo(audioData)\n\n                                    setLoading(false)\n\n                                    setBpm(Math.round(tempo.tempo))\n                                },\n                            )\n                        }\n                        reader.readAsArrayBuffer(file)\n                    }}\n                >\n                    BPM 측정하기\n                </LoadingButton>\n            </Container>\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}