{"version":3,"sources":["Header.js","App.js","index.js"],"names":["Header","AppBar","position","Toolbar","Typography","variant","context","AudioContext","App","React","useState","file","setFile","loading","setLoading","bpm","setBpm","drag","setDrag","alert","setAlert","style","minHeight","onDragOver","e","preventDefault","onDragLeave","onDrop","dataTransfer","files","type","startsWith","CssBaseline","Backdrop","zIndex","open","color","fontSize","fontWeight","Container","marginTop","Alert","severity","marginBottom","display","alignItems","gap","accept","id","onChange","target","htmlFor","Button","component","name","LoadingButton","startIcon","Check","disabled","loadingPosition","onClick","a","reader","FileReader","onload","fileEvent","decodeAudioData","result","buffer","audioData","numberOfChannels","channel1Data","getChannelData","channel2Data","length","i","tempo","MusicTempo","Math","round","message","readAsArrayBuffer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.09634f68.chunk.js","sourcesContent":["import React from 'react'\nimport { AppBar, Toolbar, Typography } from '@material-ui/core'\n\nconst Header = () => {\n    return (\n        <AppBar position=\"sticky\">\n            <Toolbar>\n                <Typography variant=\"h6\">BPM Analyzer</Typography>\n            </Toolbar>\n        </AppBar>\n    )\n}\n\nexport default Header\n","import React from 'react'\nimport {\n    Button,\n    Container,\n    CssBaseline,\n    Typography,\n    Alert,\n    Backdrop,\n} from '@material-ui/core'\nimport Header from './Header'\nimport MusicTempo from 'music-tempo'\nimport { LoadingButton } from '@material-ui/lab'\nimport { Check } from '@material-ui/icons'\n\nconst context = new AudioContext()\n\nconst App = () => {\n    const [file, setFile] = React.useState(null)\n    const [loading, setLoading] = React.useState(false)\n    const [bpm, setBpm] = React.useState(null)\n    const [drag, setDrag] = React.useState(false)\n    const [alert, setAlert] = React.useState('')\n\n    return (\n        <div\n            style={{\n                minHeight: '100vh',\n            }}\n            onDragOver={(e) => {\n                e.preventDefault()\n                setDrag(true)\n            }}\n            onDragLeave={() => {\n                setDrag(false)\n            }}\n            onDrop={(e) => {\n                e.preventDefault()\n                setBpm(null)\n                setDrag(false)\n                const file = e.dataTransfer.files[0]\n                if (!file.type.startsWith('audio/')) {\n                    return setAlert('오디오 파일만 사용 가능합니다.')\n                }\n                setAlert(null)\n                setFile(file)\n            }}\n        >\n            <CssBaseline />\n            <Header />\n            <Backdrop style={{ zIndex: 99999 }} open={drag}>\n                <Typography color=\"#fff\" fontSize={40} fontWeight={900}>\n                    드래그해서 파일 선택하기\n                </Typography>\n            </Backdrop>\n            <Container style={{ marginTop: 30 }}>\n                <Typography variant=\"h4\">BPM 측정하기</Typography>\n\n                {(bpm || alert) && (\n                    <Alert\n                        severity={alert ? 'error' : 'success'}\n                        style={{ marginBottom: 10, marginTop: 5 }}\n                    >\n                        {alert ? alert : <>BPM: {bpm}</>}\n                    </Alert>\n                )}\n\n                <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>\n                    <input\n                        type=\"file\"\n                        accept=\"audio/*\"\n                        style={{ display: 'none' }}\n                        id=\"file-select\"\n                        onChange={(e) => {\n                            if (e.target.files[0]) {\n                                setFile(e.target.files[0])\n                                setBpm(null)\n                            }\n                        }}\n                    />\n                    <label htmlFor=\"file-select\">\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            component=\"span\"\n                        >\n                            파일 선택\n                        </Button>\n                    </label>\n                    <Typography variant=\"h6\" component=\"span\">\n                        {file ? file.name : '파일을 선택해주세요'}\n                    </Typography>\n                </div>\n                <LoadingButton\n                    loading={loading}\n                    variant=\"outlined\"\n                    color=\"primary\"\n                    startIcon={<Check />}\n                    style={{ marginTop: 10 }}\n                    disabled={!file}\n                    loadingPosition=\"start\"\n                    onClick={async () => {\n                        setLoading(true)\n                        setBpm(null)\n                        setAlert(null)\n                        const reader = new FileReader()\n                        reader.onload = function (fileEvent) {\n                            context.decodeAudioData(\n                                fileEvent.target.result,\n                                (buffer) => {\n                                    try {\n                                        let audioData = []\n\n                                        if (buffer.numberOfChannels === 2) {\n                                            const channel1Data =\n                                                buffer.getChannelData(0)\n                                            const channel2Data =\n                                                buffer.getChannelData(1)\n                                            const length = channel1Data.length\n                                            for (let i = 0; i < length; i++) {\n                                                audioData[i] =\n                                                    (channel1Data[i] +\n                                                        channel2Data[i]) /\n                                                    2\n                                            }\n                                        } else {\n                                            audioData = buffer.getChannelData(0)\n                                        }\n\n                                        const tempo = new MusicTempo(audioData)\n\n                                        setLoading(false)\n\n                                        setBpm(Math.round(tempo.tempo))\n                                    } catch (e) {\n                                        setAlert(e.message)\n                                    }\n                                },\n                            )\n                        }\n                        reader.readAsArrayBuffer(file)\n                    }}\n                >\n                    BPM 측정하기\n                </LoadingButton>\n            </Container>\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}